/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.eshark.dctm.gui;

import java.util.ArrayList;
import java.util.List;
import org.jdesktop.application.Action;
import org.jdesktop.application.Task;
import org.eshark.dctm.gui.model.SorterTableModel;
import org.eshark.dctm.task.ExecuteDQLTask;
import static org.eshark.dctm.MainApplication.getApplication;


/**
 * <TABLE BORDER="1" WIDTH="100%">
 * <TR>
 * <TH>Perticulars</TH><TH>::</TH><TH>Details</TH>
 * </TR>
 * <TR>
 * <TD>Project Name</TD><TD>::</TD><TD>Query Builder D-SIX</TD>
 * </TR>
 * <TR>
 * <TD>File Name</TD><TD>::</TD><TD>DQLQueryView.java</TD>
 * </TR>
 * <TR>
 * <TD>Created on</TD><TD>::</TD><TD>Sep 22, 2008 11:33:58 AM</TD>
 * </TR>
 * <TR>
 * <TD>@author</TD><TD>::</TD><TD><a href="mailto:subhasish@gmail.com">Subhasish Chattopadhyay</a></TD>
 * </TR>
 * <TR>
 * <TD>Purpose</TD><TD>::</TD><TD></TD>
 * </TR>
 * <TR>
 * <TD COLSPAN=3></TD>
 * </TR>
 * </TABLE>
 *
 * <TABLE BORDER="1" WIDTH="100%">
 * <CAPTION>File Change History</CAPTION>
 * <TR>
 * <TH>Date</TH><TH>Description</TH>                    |
 * </TR>
 * <TR>
 * <TD>Sep 22, 2008</TD><TD>Created</TD>
 * </TR>
 * </TABLE>
 */
@SuppressWarnings("unchecked")
public class DQLQueryView extends javax.swing.JInternalFrame
{
	private static final long	serialVersionUID	= -5339999291337943077L;

	/** Creates new form Query */
	public DQLQueryView()
	{
		mTableModel = new SorterTableModel();
		//ArrayList lList =   new ArrayList();
		initComponents();
		mTableModel.addMouseListenerToHeaderInTable(resultTable);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{

		dqlResultSplitPane = new javax.swing.JSplitPane();
		topPanel = new javax.swing.JPanel();
		executeDQLButton = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		queryTextArea = new javax.swing.JTextArea();
		prevButton = new javax.swing.JButton();
		nextButton = new javax.swing.JButton();
		firstButton = new javax.swing.JButton();
		lastButton = new javax.swing.JButton();
		resultScrollPane = new javax.swing.JScrollPane();
		resultTable = new javax.swing.JTable();

		setClosable(true);
		setIconifiable(true);
		setMaximizable(true);
		setResizable(true);
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(
				org.eshark.dctm.MainApplication.class).getContext().getResourceMap(DQLQueryView.class);
		setTitle(resourceMap.getString("Form.title")); // NOI18N
		setToolTipText(resourceMap.getString("Form.toolTipText")); // NOI18N
		setDoubleBuffered(true);
		setName("Form"); // NOI18N
		addInternalFrameListener(new javax.swing.event.InternalFrameListener()
		{
			public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
			{
			}

			public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
			{
			}

			public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
			{
				frameClosing(evt);
			}

			public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
			{
			}

			public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
			{
			}

			public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
			{
			}

			public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
			{
			}
		});

		dqlResultSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
		dqlResultSplitPane.setName("dqlResultSplitPane"); // NOI18N

		topPanel.setName("topPanel"); // NOI18N

		javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(
				org.eshark.dctm.MainApplication.class).getContext().getActionMap(DQLQueryView.class, this);
		executeDQLButton.setAction(actionMap.get("executeDQL")); // NOI18N
		executeDQLButton.setMnemonic('E');
		executeDQLButton.setText(resourceMap.getString("executeDQLButton.text")); // NOI18N
		executeDQLButton.setEnabled(false);
		executeDQLButton.setName("executeDQLButton"); // NOI18N

		jScrollPane1.setName("jScrollPane1"); // NOI18N

		queryTextArea.setColumns(20);
		queryTextArea.setRows(5);
		queryTextArea.setName("queryTextArea"); // NOI18N
		queryTextArea.addKeyListener(new java.awt.event.KeyAdapter()
		{
			public void keyTyped(java.awt.event.KeyEvent evt)
			{
				queryTextAreaKeyTyped(evt);
			}
		});
		jScrollPane1.setViewportView(queryTextArea);

		prevButton.setMnemonic('<');
		prevButton.setText(resourceMap.getString("prevButton.text")); // NOI18N
		prevButton.setName("prevButton"); // NOI18N
		prevButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				prevButtonActionPerformed(evt);
			}
		});

		nextButton.setMnemonic('>');
		nextButton.setText(resourceMap.getString("nextButton.text")); // NOI18N
		nextButton.setName("nextButton"); // NOI18N
		nextButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				nextButtonActionPerformed(evt);
			}
		});

		firstButton.setMnemonic('F');
		firstButton.setText(resourceMap.getString("firstButton.text")); // NOI18N
		firstButton.setName("firstButton"); // NOI18N
		firstButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				firstButtonActionPerformed(evt);
			}
		});

		lastButton.setMnemonic('L');
		lastButton.setText(resourceMap.getString("lastButton.text")); // NOI18N
		lastButton.setName("lastButton"); // NOI18N
		lastButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				lastButtonActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout topPanelLayout = new org.jdesktop.layout.GroupLayout(topPanel);
		topPanel.setLayout(topPanelLayout);
		topPanelLayout.setHorizontalGroup(topPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(
						org.jdesktop.layout.GroupLayout.TRAILING,
						topPanelLayout.createSequentialGroup().add(jScrollPane1,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 647, Short.MAX_VALUE).addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								topPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
										topPanelLayout.createSequentialGroup().add(
												topPanelLayout.createParallelGroup(
														org.jdesktop.layout.GroupLayout.TRAILING, false).add(
														prevButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.add(firstButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE)).addPreferredGap(
												org.jdesktop.layout.LayoutStyle.UNRELATED).add(
												topPanelLayout.createParallelGroup(
														org.jdesktop.layout.GroupLayout.TRAILING, false).add(
														nextButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
														.add(lastButton, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
																Short.MAX_VALUE))).add(executeDQLButton,
										org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))
								.addContainerGap()));
		topPanelLayout.setVerticalGroup(topPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
				.add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE).add(
						topPanelLayout.createSequentialGroup().add(executeDQLButton).addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED).add(
								topPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(
										prevButton).add(nextButton)).addPreferredGap(
								org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE).add(
								topPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(
										firstButton).add(lastButton)).addContainerGap()));

		dqlResultSplitPane.setTopComponent(topPanel);

		resultScrollPane.setName("resultScrollPane"); // NOI18N

		resultTable.setModel(mTableModel);
		resultTable.setName("resultTable"); // NOI18N
		resultScrollPane.setViewportView(resultTable);

		dqlResultSplitPane.setRightComponent(resultScrollPane);

		getContentPane().add(dqlResultSplitPane, java.awt.BorderLayout.CENTER);

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void frameClosing(javax.swing.event.InternalFrameEvent evt)
	{//GEN-FIRST:event_frameClosing
		MainMDIView.DQL_QUERY_VIEW = null;
	}//GEN-LAST:event_frameClosing

	private void queryTextAreaKeyTyped(java.awt.event.KeyEvent evt)
	{//GEN-FIRST:event_queryTextAreaKeyTyped
		if (queryTextArea.getText().trim().length() > 0)
			executeDQLButton.setEnabled(true);
		else
			executeDQLButton.setEnabled(false);
	}//GEN-LAST:event_queryTextAreaKeyTyped

	private void firstButtonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_firstButtonActionPerformed
		QUERY_CURR_INDX = 0;
		queryTextArea.setText(QUERY_LIST.get(QUERY_CURR_INDX));
	}//GEN-LAST:event_firstButtonActionPerformed

	private void lastButtonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_lastButtonActionPerformed
		QUERY_CURR_INDX = QUERY_LIST.size() - 1;
		queryTextArea.setText(QUERY_LIST.get(QUERY_CURR_INDX));
	}//GEN-LAST:event_lastButtonActionPerformed

	private void prevButtonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_prevButtonActionPerformed
		if (QUERY_CURR_INDX > 0)
			queryTextArea.setText(QUERY_LIST.get(--QUERY_CURR_INDX));
	}//GEN-LAST:event_prevButtonActionPerformed

	private void nextButtonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_nextButtonActionPerformed
		if (QUERY_CURR_INDX < QUERY_LIST.size() - 1)
			queryTextArea.setText(QUERY_LIST.get(++QUERY_CURR_INDX));
	}//GEN-LAST:event_nextButtonActionPerformed

	@Action
	public Task executeDQL()
	{
		String lstrDQL = queryTextArea.getText();
		Task lTask = new ExecuteDQLTask(getApplication(), lstrDQL, resultTable);
		queryTextArea.requestFocus();
		return lTask;
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JSplitPane	dqlResultSplitPane;
	private javax.swing.JButton		executeDQLButton;
	private javax.swing.JButton		firstButton;
	private javax.swing.JScrollPane	jScrollPane1;
	private javax.swing.JButton		lastButton;
	private javax.swing.JButton		nextButton;
	private javax.swing.JButton		prevButton;
	private javax.swing.JTextArea	queryTextArea;
	private javax.swing.JScrollPane	resultScrollPane;
	private javax.swing.JTable		resultTable;
	private javax.swing.JPanel		topPanel;
	// End of variables declaration//GEN-END:variables

	private SorterTableModel		mTableModel;
	public static List<String>		QUERY_LIST		= new ArrayList<String>();
	public static int				QUERY_LIMIT		= 100;
	public static int				QUERY_CURR_INDX	= -1;
}
