/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.eshark.dctm.gui;

import com.documentum.fc.common.DfException;
import org.eshark.dctm.core.DocbaseUtils;
import java.util.List;
import javax.swing.JOptionPane;
import org.eshark.dctm.MainApplication;
import org.eshark.dctm.gui.model.ListComboBoxModel;
import org.eshark.dctm.mgr.AppSessionManager;

/**
 * <TABLE BORDER="1" WIDTH="100%">
 * <TR>
 * <TH>Perticulars</TH><TH>::</TH><TH>Details</TH>
 * </TR>
 * <TR>
 * <TD>Project Name</TD><TD>::</TD><TD>Query Builder D-SIX</TD>
 * </TR>
 * <TR>
 * <TD>File Name</TD><TD>::</TD><TD>LoginView.java</TD>
 * </TR>
 * <TR>
 * <TD>Created on</TD><TD>::</TD><TD>Sep 22, 2008 11:36:00 AM</TD>
 * </TR>
 * <TR>
 * <TD>@author</TD><TD>::</TD><TD><a href="mailto:subhasish@gmail.com">Subhasish Chattopadhyay</a></TD>
 * </TR>
 * <TR>
 * <TD>Purpose</TD><TD>::</TD><TD></TD>
 * </TR>
 * <TR>
 * <TD COLSPAN=3></TD>
 * </TR>
 * </TABLE>
 *
 * <TABLE BORDER="1" WIDTH="100%">
 * <CAPTION>File Change History</CAPTION>
 * <TR>
 * <TH>Date</TH><TH>Description</TH>                    |
 * </TR>
 * <TR>
 * <TD>Sep 22, 2008</TD><TD>Created</TD>
 * </TR>
 * </TABLE>
 */
@SuppressWarnings("unchecked")
public class LoginView extends javax.swing.JInternalFrame
{
	private static final long	serialVersionUID	= -628513180313950933L;

	/** Creates new form LoginView */
	public LoginView() throws DfException
	{
		//Code to generate the Docbase List
		List<String> lDocbaseList = DocbaseUtils.getDocbaseList();
		ListComboBoxModel lComboModel = new ListComboBoxModel(lDocbaseList);
		initComponents();
		docbaseCombo.setModel(lComboModel);
		if (lComboModel.getSize() > 0)
			docbaseCombo.setSelectedIndex(0);
		//validate();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents()
	{

		jLabel1 = new javax.swing.JLabel();
		jLabel2 = new javax.swing.JLabel();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		userIdText = new javax.swing.JTextField();
		userPassword = new javax.swing.JPasswordField();
		docbaseCombo = new javax.swing.JComboBox();
		domainText = new javax.swing.JTextField();
		oKButton = new javax.swing.JButton();
		cancelButton = new javax.swing.JButton();

		setClosable(true);
		org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(
				org.eshark.dctm.MainApplication.class).getContext().getResourceMap(LoginView.class);
		setTitle(resourceMap.getString("LoginView.title")); // NOI18N
		setDoubleBuffered(true);
		setName("LoginView"); // NOI18N

		jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
		jLabel1.setName("jLabel1"); // NOI18N

		jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
		jLabel2.setName("jLabel2"); // NOI18N

		jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
		jLabel3.setName("jLabel3"); // NOI18N

		jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
		jLabel4.setName("jLabel4"); // NOI18N

		userIdText.setName("userIdText"); // NOI18N
		userPassword.setName("userPassword"); // NOI18N

		docbaseCombo.setToolTipText(resourceMap.getString("docbaseCombo.toolTipText")); // NOI18N
		docbaseCombo.setName("docbaseCombo"); // NOI18N

		domainText.setText(resourceMap.getString("domainText.text")); // NOI18N
		domainText.setName("domainText"); // NOI18N

		oKButton.setMnemonic('O');
		oKButton.setText(resourceMap.getString("oKButton.text")); // NOI18N
		oKButton.setName("oKButton"); // NOI18N
		oKButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				oKButtonActionPerformed(evt);
			}
		});

		cancelButton.setMnemonic('C');
		cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
		cancelButton.setName("cancelButton"); // NOI18N
		cancelButton.addActionListener(new java.awt.event.ActionListener()
		{
			public void actionPerformed(java.awt.event.ActionEvent evt)
			{
				cancelButtonActionPerformed(evt);
			}
		});

		org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				org.jdesktop.layout.GroupLayout.TRAILING,
				layout.createSequentialGroup().add(
						layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(
								layout.createSequentialGroup().addContainerGap().add(oKButton).addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED).add(cancelButton)).add(
								layout.createSequentialGroup().add(44, 44, 44).add(
										layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
												.add(jLabel4).add(jLabel3).add(jLabel2).add(jLabel1)).addPreferredGap(
										org.jdesktop.layout.LayoutStyle.RELATED).add(
										layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
												userIdText, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 254,
												Short.MAX_VALUE).add(domainText,
												org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
												.add(docbaseCombo, 0, 254, Short.MAX_VALUE).add(userPassword,
														org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 254,
														Short.MAX_VALUE)))).add(53, 53, 53)));
		layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
				layout.createSequentialGroup().add(32, 32, 32).add(
						layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
								org.jdesktop.layout.GroupLayout.TRAILING, jLabel1).add(
								org.jdesktop.layout.GroupLayout.TRAILING, userIdText)).addPreferredGap(
						org.jdesktop.layout.LayoutStyle.RELATED).add(
						layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
								org.jdesktop.layout.GroupLayout.TRAILING, userPassword,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(
								org.jdesktop.layout.GroupLayout.TRAILING, jLabel2)).addPreferredGap(
						org.jdesktop.layout.LayoutStyle.RELATED).add(
						layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
								org.jdesktop.layout.GroupLayout.TRAILING, docbaseCombo,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(
								org.jdesktop.layout.GroupLayout.TRAILING, jLabel3)).addPreferredGap(
						org.jdesktop.layout.LayoutStyle.RELATED).add(
						layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(
								org.jdesktop.layout.GroupLayout.TRAILING, jLabel4).add(
								org.jdesktop.layout.GroupLayout.TRAILING, domainText,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,
								org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,
								org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(
						org.jdesktop.layout.LayoutStyle.RELATED).add(
						layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(cancelButton).add(
								oKButton)).add(16, 16, 16)));

		pack();
	}// </editor-fold>//GEN-END:initComponents

	private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_cancelButtonActionPerformed
		hide();
		dispose();
	}//GEN-LAST:event_cancelButtonActionPerformed

	private void oKButtonActionPerformed(java.awt.event.ActionEvent evt)
	{//GEN-FIRST:event_oKButtonActionPerformed
		String lUser = userIdText.getText();
		String lPassword = new String(userPassword.getPassword());
		String lDocbase = docbaseCombo.getSelectedItem().toString();
		String lDomain = domainText.getText();
		AppSessionManager lAppSMR = AppSessionManager.getInstance();
		lAppSMR.setDocbase(lDocbase);
		lAppSMR.setUser(lUser);
		lAppSMR.setPassword(lPassword);
		lAppSMR.setDomain(lDomain);
		try
		{
			AppSessionManager.getInstance().releaseSession(AppSessionManager.getInstance().getSession());
			//SET THE DOCBASE NAME AND USER CONNECTED
			((MainMDIView) MainApplication.getApplication().getMainView()).docbaseLabel.setText(lDocbase);
			((MainMDIView) MainApplication.getApplication().getMainView()).userLabel.setText(lUser);
			((MainMDIView) MainApplication.getApplication().getMainView()).manageMenuOnLogInAndOut(true);

			hide();
			dispose();//GEN-LAST:event_oKButtonActionPerformed
		}
		catch (Exception E)
		{
			JOptionPane.showInternalMessageDialog(this, "Invalid user or password.", "Information",
					JOptionPane.INFORMATION_MESSAGE);
			userIdText.requestFocus();
		}
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton			cancelButton;
	private javax.swing.JComboBox		docbaseCombo;
	private javax.swing.JTextField		domainText;
	private javax.swing.JLabel			jLabel1;
	private javax.swing.JLabel			jLabel2;
	private javax.swing.JLabel			jLabel3;
	private javax.swing.JLabel			jLabel4;
	private javax.swing.JButton			oKButton;
	private javax.swing.JTextField		userIdText;
	private javax.swing.JPasswordField	userPassword;
	// End of variables declaration//GEN-END:variables

}
